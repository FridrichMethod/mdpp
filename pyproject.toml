[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mdpp"
dynamic = ["version"]
authors = [{ name = "Zhaoyang Li", email = "zhaoyangli@stanford.edu" }]
license = { file = "LICENSE" }
readme = "README.md"
description = "MD simulation pre- and post-processing"
requires-python = ">=3.12"
dependencies = [
  "biopython",
  "matplotlib",
  "mdanalysis",
  "mdtraj",
  "numpy",
  "pandas",
  "scipy",
  "seaborn",
]

[tool.setuptools.dynamic]
version = { attr = "mdpp.__version__" }

[project.optional-dependencies]
dev = [
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-env",
  "pytest-timeout",
  "pytest-xdist",
  "ruff",
]
mypy = [
  "mypy",
  "types-aiofiles",
  "types-cachetools",
  "types-python-dateutil",
  "types-python-slugify",
  "types-pytz",
  "types-PyYAML",
  "types-redis",
  "types-requests",
  "types-six",
  "types-tabulate",
  "types-toml",
]

[tool.ruff]
target-version = "py312"
preview = true
line-length = 100
src = ["src"]
extend-exclude = [
  ".git",
  ".hg",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "_build",
  "buck-out",
  "build",
  "dist",
]

[tool.ruff.lint]
# Check https://beta.ruff.rs/docs/rules/ for full list of rules
select = [
  "E", # pycodestyle
  # "W",   # pycodestyle
  "F",   # Pyflakes
  "C90", # mccabe
  "I",   # isort
  # "N",   # pep8-naming
  # "D",   # pydocstyle
  "UP", # pyupgrade
  # "YTT", # flake8-2020
  # "ANN", # flake8-annotations
  # "S",   # flake8-bandit
  # "BLE", # flake8-blind-except
  # "FBT", # flake8-boolean-trap
  "B", # flake8-bugbear
  # "A",   # flake8-builtins
  # "COM", # flake8-commas
  # "C4",  # flake8-comprehensions
  # "DTZ", # flake8-datetimez
  # "T10", # flake8-debugger
  # "DJ",  # flake8-django
  # "EM",  # flake8-errmsg
  # "EXE", # flake8-executable
  # "ISC", # flake8-implicit-str-concat
  # "ICN", # flake8-import-conventions
  # "G",   # flake8-logging-format
  # "INP", # flake8-no-pep420
  # "PIE", # flake8-pie
  # "T20", # flake8-print
  # "PYI", # flake8-pyi
  # "PT",  # flake8-pytest-style
  # "Q",   # flake8-quotes
  # "RSE", # flake8-raise
  # "RET", # flake8-return
  # "SLF", # flake8-self
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  # "TCH", # flake8-type-checking
  # "ARG", # flake8-unused-arguments
  # "PTH", # flake8-use-pathlib
  # "ERA", # eradicate
  # "PD",  # pandas-vet
  # "PGH", # pygrep-hooks
  # "PLC", # pylint-convention
  "PLE", # pylint-error
  # "PLR", # pylint-refactor
  # "PLW", # pylint-warning
  # "TRY", # tryceratops
  # "NPY", # numpy
  "RUF", # ruff
]
extend-select = ["W", "PLW"]
ignore = ["E203", "E501", "E741"]

[tool.ruff.lint.isort]
known-first-party = ["mdpp"]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"*.ipynb" = ["F401", "RUF059"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.mypy]
python_version = "3.12"
pretty = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
  "Bio.*",
  "git.*",
  "hydra.*",
  "IPython.*",
  "matplotlib.*",
  "mdtraj.*",
  "numpy.*",
  "openmm.*",
  "tqdm.*",
  "torch.*",
  "torch_geometric.*",
  "torch_scatter.*",
  "pandas.*",
  "pdbfixer.*",
  "pytest.*",
  "omegaconf.*",
  "scipy.*",
  "sklearn.*",
]
ignore_missing_imports = true

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]

[tool.pytest.ini_options]
addopts = "-v -s"
testpaths = ["tests"]
env = ["TQDM_DISABLE=1"]

[tool.coverage.run]
branch = true
parallel = true
source = ["mdpp"]
omit = ["*/tests/*", "*/.venv/*", "*/site-packages/*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
